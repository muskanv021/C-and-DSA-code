#include <stdio.h>
#include <stdlib.h>

// Define the structure for a node in the linked list
struct Node
{
    int data;
    struct Node *next;
};
typedef struct Node node;

// Initialize head and other variables
node *head = NULL;
node *ptr;
node *ptr1;
int count = 0, i,x,ch,p;

//Function to insert a node at the beginning of the linked list
void ins_beg(int x)
{
    ptr = (node *)malloc(sizeof(node)); // Allocate memory for the new node
    ptr->data = x; // Set the data of the new node
    if (head == NULL)
    {
        ptr->next = NULL; // If the list is empty, set next to NULL
    }
    else
    {
        ptr->next = head; // Otherwise, point to the current head
    }
    head = ptr; // Update head to the new node
    count++;
}
void ins_end(int x)
{
    ptr=(node *)malloc(sizeof(node));
    ptr->data=x;
    if(head==NULL)
    {
        head=ptr;
    }
    else
    {
        ptr1=head;
        while(ptr1->next!=NULL)
        {
            ptr1=ptr1->next;
        }
        ptr1->next=ptr;
        
    }
  ptr->next =NULL;
  count++;  
}

void ins_pos (int p,int x)
{
    
    if(p>=1 && p<=count+1)
    {
        if(p==1)
        {
            ins_beg(x);
        }
        else if(p==count+1)
        {
            ins_end(x);
        }
        else{
            ptr=(node *)malloc(sizeof(node));
            ptr->data =x;
            ptr1=head;
            for(i=1;i<p-1;i++)
            {
                ptr1=ptr1->next;
            }
            ptr->next =ptr1->next;
            ptr1->next =ptr;
            count++;
        }
    }
}

// Function to traverse and print the linked list
void traverse()
{
    if (head == NULL)
    {
        printf("\nList is empty!!!\n");
    }
    else
    {
        ptr = head; // Start from the head
        printf("\nElements: ");
        while (ptr != NULL)
        {
            printf("%d ", ptr->data); // Print the data of the current node
            ptr = ptr->next; // Move to the next node
        }
        printf("\n");
    }
}

// Main function
int main()
{
    int x,ch;
    do
    {
        printf("------------LinkedList---------------");
        printf("\n Press 1 for Insert in Begining");
        printf("\n Press 2 for Insert at the end");
        printf("\n Press 3 for specific Position");
        printf("\n Press 4 for Traverse");
        printf("\n Press 5 for Exit");
        printf("\n Enter your choice ");
        scanf("%d",&ch);
        switch(ch)
        {
            case 1: 
            printf("\n Enter a value:-");
            scanf("%d",&x);
            ins_beg(x);
            break;
            
            case 2: 
            printf("\n Enter a value:-");
            scanf("%d",&x);
            ins_end(x);
            break;
            
            case 3: 
            printf("\n Enter position:-");
            scanf("%d",&p);
            printf("\n Enter a value");
            scanf("%d",&x);
            ins_pos( p,x);
            break;
            
            case 4: 
              traverse();
              break;
              
            case 5: 
             exit(0);
             
            default :
             printf("Invalid Choice!!");
        }
    }while(1);
    return 0;
}
